AIC(lreg.h3a.pss.0,lreg.h3a.pss.1,lreg.h3a.pss.2)
BIC(lreg.h3a.pss.0,lreg.h3a.pss.1,lreg.h3a.pss.2)
library(brms)
# brms
prior.coef <- brms::prior(cauchy(0.,1),class='b')
# brms
prior.coef <- brms::prior(cauchy(0.,1),class='b')
breg.h3a.pss.2 <- brm(pss~primary_stressor_avg+(1+primary_stressor_avg|
residing_country), data=data.aligned,
family = gaussian(),
cores=4,chains=4, save_all_pars = TRUE,
sample_prior ='yes',prior=prior.coef, seed=1660415)
breg.h3a.pss.2
hypothesis('primary_stressor_avg=0',breg.h3a.pss.2)
hypothesis('primary_stressor_avg = 0',breg.h3a.pss.2)
?hypothesis
hypothesis(breg.h3a.pss.2,'primary_stressor_avg = 0')
library(bayestestR)
hdi(breg.h3a.pss.2)
rope(breg.h3a.pss.2)
### mediation pilot
breg.h3da.2 <- brm(pss~identity+(1+primary_stressor_avg|
identity), data=data.aligned,
family = gaussian(),
cores=4,chains=4, save_all_pars = TRUE,
sample_prior ='yes',prior=prior.coef, seed=1660415)
### mediation pilot
breg.h3da.pss.2 <- brm(pss~identity+(1+primary_stressor_avg|
identity), data=data.aligned,
family = gaussian(),
cores=4,chains=4, save_all_pars = TRUE,
sample_prior ='yes',prior=prior.coef, seed=1660415)
breg.h3da.pss.2
hdi(breg.h3da.pss.2)
breg.h3da.pss.2 <- brm(pss~identity+(1+identity|
residing_country), data=data.aligned,
family = gaussian(),
cores=4,chains=4, save_all_pars = TRUE,
sample_prior ='yes',prior=prior.coef, seed=1660415)
breg.h3da.pss.m.2<- brm(pss~identity+sps+(1+identity+sps|
residing_country), data=data.aligned,
family = gaussian(),
cores=4,chains=4, save_all_pars = TRUE,
sample_prior ='yes',prior=prior.coef, seed=1660415)
breg.h3da.pss.m.2
breg.h3da.pss.2
h3da.test <- brm(breg.h3da.pss.m.2+breg.h3da.pss.2+set_rescor(F),data=data.aligned)
model.3da.pss.2 <- bf(pss~identity+(1+identity|
residing_country))
h3da.test <- brm(model.3da.pss.m.2 + model.3da.pss.2 +
set_rescor(F),data=data.aligned,family = gaussian(),
cores=4,chains=4, save_all_pars = TRUE,
sample_prior ='yes',prior=prior.coef, seed=1660415)
model.3da.pss.2 <- bf(pss~identity+(1+identity|
residing_country))
model.3da.pss.m.2 <- bf(pss~identity+sps+(1+identity+sps|
residing_country))
h3da.test <- brm(model.3da.pss.m.2 + model.3da.pss.2 +
set_rescor(F),data=data.aligned,family = gaussian(),
cores=4,chains=4, save_all_pars = TRUE,
sample_prior ='yes',prior=prior.coef, seed=1660415)
### mediation pilot
model.3da.pss.2 <- bf(sps~identity+(1+identity|
residing_country))
model.3da.pss.m.2 <- bf(pss~identity+sps+(1+identity+sps|
residing_country))
h3da.test <- brm(model.3da.pss.m.2 + model.3da.pss.2 +
set_rescor(F),data=data.aligned,family = gaussian(),
cores=4,chains=4, save_all_pars = TRUE,
sample_prior ='yes',prior=prior.coef, seed=1660415)
h3da.test
sjstats::mediation(h3da.test)
bayestestR::::mediation(h3da.test)
bayestestR::mediation(h3da.test)
model.3da.rs.2 <- bf(resilience~identity+(1+identity|
residing_country))
model.3da.rs.m.2 <- bf(resilience~identity+sps+(1+identity+sps|
residing_country))
h3da.rs.test <- brm(model.3da.rs.m.2 + model.3da.rs.2 +
set_rescor(F),data=data.aligned,family = gaussian(),
cores=4,chains=4, save_all_pars = TRUE,
sample_prior ='yes',prior=prior.coef, seed=1660415)
bayestestR::mediation(h3da.rs.test)
h3da.rs.test <- brm(model.3da.rs.m.2 + model.3da.pss.2 +
set_rescor(F),data=data.aligned,family = gaussian(),
cores=4,chains=4, save_all_pars = TRUE,
sample_prior ='yes',prior=prior.coef, seed=1660415)
h3da.rs.test
bayestestR::mediation(h3da.rs.test)
setwd("~/Documents/GitHub/COVIDiSTRESS2_Stress")
load("~/Documents/GitHub/COVIDiSTRESS2_Stress/Stress_aligned.RData")
table(data.aligned$UserLanguage)
table(data.aligned$residing_country)
table(data.aligned$residing_country)>=30
sum(table(data.aligned$residing_country)>=30)
# filtering by country n >= 30
country.30 <- table(data.aligned$residing_country) >= 30
country.30
# filtering by country n >= 30
country.30 <- table(data.aligned$residing_country) >= 30
n.country <- table(data.aligned$residing_country)
list.country <- labels(n.country)[[1]]
country.include <- list.country[n.country>=30]
n.include.c <- n.country[n.country>=100]
# extract data
for (i in 1:length(country.include)){
if (i == 1){
data.filtered <- data.aligned[data.aligned$residing_country ==
country.include[i],]
}else{
current <- data.aligned[data.aligned$residing_country == country.include[i],]
data.filtered <- rbind(data.filtered,current)
}
}
# save aligned datafile
save.image(file='Stress_aligned.RData')
table(data.filtered$residing_country)
# filtering by country n >= 30
country.30 <- table(data.aligned$residing_country) >= 30
n.country <- table(data.aligned$residing_country)
list.country <- labels(n.country)[[1]]
country.include <- list.country[n.country>=30]
n.include.c <- n.country[n.country>=30]
# extract data
for (i in 1:length(country.include)){
if (i == 1){
data.filtered <- data.aligned[data.aligned$residing_country ==
country.include[i],]
}else{
current <- data.aligned[data.aligned$residing_country == country.include[i],]
data.filtered <- rbind(data.filtered,current)
}
}
length(country.include
)
i<-1
if (i == 1){
data.filtered <- data.aligned[data.aligned$residing_country ==
country.include[i],]
}else{
current <- data.aligned[data.aligned$residing_country == country.include[i],]
data.filtered <- rbind(data.filtered,current)
}
# extract data
for (i in 1:length(country.include)){
if (i == 1){
data.filtered <- data.aligned[data.aligned$residing_country ==
country.include[i],]
}else{
current <- data.aligned[data.aligned$residing_country == country.include[i],]
data.filtered <- rbind(data.filtered,current)
}
}
head(data.filtered$residing_country)
country.include
n.include.c
sum(n.include.c)
# filtering by country n >= 30
country.30 <- table(data.aligned$residing_country) >= 30
n.country <- table(data.aligned$residing_country)
list.country <- labels(n.country)[[1]]
country.include <- list.country[n.country>=30]
n.include.c <- n.country[n.country>=30]
# extract data
for (i in 1:length(country.include)){
if (i == 1){
data.filtered <- data.aligned[data.aligned$residing_country ==
country.include[i],]
}else{
current <- data.aligned[data.aligned$residing_country == country.include[i],]
data.filtered <- rbind(data.filtered,current)
}
}
country.include
sum(country.include)
i<-1
if (i == 1){
data.filtered <- data.aligned[data.aligned$residing_country ==
country.include[i],]
}else{
current <- data.aligned[data.aligned$residing_country == country.include[i],]
data.filtered <- rbind(data.filtered,current)
}
country.include
n.include
n.include.c
# extract data
for (i in 1:length(country.include)){
if (i == 1){
data.filtered <- data.aligned[(data.aligned$residing_country ==
country.include[i]) & !is.na(
data.aligned$residing_country
),]
}else{
current <- data.aligned[data.aligned$residing_country == country.include[i],]
data.filtered <- rbind(data.filtered,current)
}
}
# extract data
for (i in 1:length(country.include)){
if (i == 1){
data.filtered <- data.aligned[(data.aligned$residing_country ==
country.include[i]) & !is.na(
data.aligned$residing_country
),]
}else{
current <- data.aligned[(data.aligned$residing_country == country.include[i])
& !is.na(
data.aligned$residing_country
),]
data.filtered <- rbind(data.filtered,current)
}
}
save.image(file='Stress_aligned.
# save aligned datafile
save.image(file='Stress_aligned.RData')
setwd("~/Documents/GitHub/COVIDiSTRESS2_Vaccine")
library(psych)
library(lavaan)
library(sirt)
library(MASS)
# function for factor score adjustment
aligned.factor.scores <- function(lambda,nu,y){
# calculate inverse matrix
lambda1 <- ginv((lambda))
# create matrix for nu
ns <- nrow(y)
nus <- matrix(nu,nrow=ns,ncol=length(nu),byrow=T)
# y - nu
y_nu <- y - nus
# f = inv(lambda)*(y-nu)
F <- lambda1 %*% t(as.matrix(y_nu))
}
# extract Vax_related variable names
# without 4
vaxs <- c('vaccine_attitudes_9_midneutral','vaccine_attitudes_2_midneutral',
'vaccine_attitudes_3_midneutral',
'vaccine_attitudes_5_midneutral','vaccine_attitudes_6_midneutral')
# Load the cleaned csv file
# load data
data<-read.csv('Final_COVIDiSTRESS_Vol2_cleaned.csv')
# reverse coding
data$vaccine_attitudes_4_midneutral <- 8-data$vaccine_attitudes_4_midneutral
data$vaccine_attitudes_5_midneutral <- 8-data$vaccine_attitudes_5_midneutral
# extract languages with n >= 100
n.langs <- table(data$UserLanguage)
list.langs <- labels(n.langs)[[1]]
langs.include <- list.langs[n.langs>=100]
n.include <- n.langs[n.langs>=100]
# extract data
for (i in 1:length(langs.include)){
if (i == 1){
data.mi <- data[data$UserLanguage == langs.include[i],]
}else{
current <- data[data$UserLanguage == langs.include[i],]
data.mi <- rbind(data.mi,current)
}
}
# set and examine fitmeasures
fits <- c('rmsea.scaled','srmr','cfi.scaled','tli.scaled')
#####
# 1. VX
# general CFA: VX
cfa.model.vx <- 'VX =~ vaccine_attitudes_9_midneutral +
vaccine_attitudes_2_midneutral+ vaccine_attitudes_3_midneutral+
vaccine_attitudes_5_midneutral+vaccine_attitudes_6_midneutral'
cfa.whole.vx <- cfa(model=cfa.model.vx,data=data.mi,estimator='WLSMV', group =
'UserLanguage')
fitMeasures(cfa.whole.vx)[fits]
# measurement alignment test
# extract parameters
par.vx <- invariance_alignment_cfa_config(dat = data.mi[,vaxs],
group = data.mi$UserLanguage)
# do alignment
mod1.vx <- invariance.alignment(lambda = par.vx$lambda, nu =
par.vx$nu, align.scale = c(0.2, 0.4), align.pow = c(0.25, 0.25))
# test performance
mod1.vx$es.invariance['R2',]
# alphas
psych::alpha(data[,vaxs],check.keys=TRUE)
# save aligned datafile
save.image(file='Vaccine_aligned.RData')
library(lmerTest)
library(brms)
# load aligned data
load((file='Vaccine_aligned.RData'))
for (i in 1:length(langs.include)){
if (i == 1){
# create new matrix
data.aligned <- data.mi[data.mi$UserLanguage==langs.include[i],]
# aligned factor score
F.vx <- aligned.factor.scores(mod1.vx$lambda.aligned[i,],
mod1.vx$nu.aligned[i,],
data.mi[data.mi$UserLanguage==langs.include[i],vaxs])
#    F.sps <- aligned.factor.scores(mod1.sps$lambda.aligned[i,],
#                                   mod1.sps$nu.aligned[i,],
#                                   data.mi[data.mi$UserLanguage==langs.include[i],items.sps])
#    F.id <- aligned.factor.scores(mod1.identity$lambda.aligned[i,],
#                                  mod1.identity$nu.aligned[i,],
#                                   data.mi[data.mi$UserLanguage==langs.include[i],items.identity])
#    F.rs <- aligned.factor.scores(mod1.resilience$lambda.aligned[i,],
#                                  mod1.resilience$nu.aligned[i,],
#                                  data.mi[data.mi$UserLanguage==langs.include[i],items.resilience])
#    F.ps <- aligned.factor.scores(mod1.ps$lambda.aligned[i,],
#                                  mod1.ps$nu.aligned[i,],
#                                  data.mi[data.mi$UserLanguage==langs.include[i],items.ps])
data.aligned$vx <- t(F.vx)
#    data.aligned$sps <- t(F.sps)
#    data.aligned$identity <- t(F.id)
#    data.aligned$resilience <- t(F.id)
#    data.aligned$primary_stressor_avg <- t(F.ps)
}else
{
# bind
current <- data.mi[data.mi$UserLanguage==langs.include[i],]
F.vx <- aligned.factor.scores(mod1.vx$lambda.aligned[i,],
mod1.vx$nu.aligned[i,],
current[,vaxs])
#    F.sps <- aligned.factor.scores(mod1.sps$lambda.aligned[i,],
#                                   mod1.sps$nu.aligned[i,],
#                                   current[,items.sps])
#    F.id <- aligned.factor.scores(mod1.identity$lambda.aligned[i,],
#                                  mod1.identity$nu.aligned[i,],
#                                   current[,items.identity])
##    F.rs <- aligned.factor.scores(mod1.resilience$lambda.aligned[i,],
#                                  mod1.resilience$nu.aligned[i,],
#                                  current[,items.resilience])
#    F.ps <- aligned.factor.scores(mod1.ps$lambda.aligned[i,],
#                                  mod1.ps$nu.aligned[i,],
#                                  current[,items.ps])
current$vx <- t(F.vx)
#    current$sps <- t(F.sps)
#    current$identity <- t(F.id)
#    current$resilience <- t(F.rs)
#    current$primary_stressor_avg <- t(F.ps)
data.aligned <- rbind(data.aligned,current)
}
}
# filtering by country n >= 30
country.30 <- table(data.aligned$residing_country) >= 30
n.country <- table(data.aligned$residing_country)
list.country <- labels(n.country)[[1]]
country.include <- list.country[n.country>=30]
n.include.c <- n.country[n.country>=30]
# extract data
for (i in 1:length(country.include)){
if (i == 1){
data.filtered <- data.aligned[(data.aligned$residing_country ==
country.include[i]) & !is.na(
data.aligned$residing_country
),]
}else{
current <- data.aligned[(data.aligned$residing_country == country.include[i])
& !is.na(
data.aligned$residing_country
),]
data.filtered <- rbind(data.filtered,current)
}
}
# save aligned datafile
save.image(file='Vaccine_aligned.RData')
# load aligned data
load((file='Vaccine_aligned.RData'))
table(data.filtered$vaccine_0neutral)
class(data.filtered$residing_country)
class(data.filtered$vaccine_0neutral)
class(data.filtered$gender)
table(data.filtered$gender)
table(data.filtered$education)
class(data$work_location)
table(data$work_location)
class(data$SSS_faml)
table(data$SSS_faml)
# model 0 (null model) demo and random intercepts
h1.0 <- lmer(vaccine_0neutral ~ gender + education + work_location + age+
SSS_faml+ relationship_status+
(1|residing_country), data=data.filtered)
h1.0
# model 0 = model 1 + predictor
h1.1 <- lmer(vaccine_0neutral ~ vx+gender + education + work_location + age+
SSS_faml+ relationship_status+
(1|residing_country), data=data.filtered)
summary(h1.1)
options(width=1000)
summary(h1.1)
# standardize willingness and VAQB
data.filtered$vx <- scale(data.filtered$vx)
data.filtered$vaccine_0neutral <- scale(data.filtered$vaccine_0neutral)
# model 0 (null model) demo and random intercepts
h1.0 <- lmer(vaccine_0neutral ~ gender + education + work_location + age+
SSS_faml+ relationship_status+
(1|residing_country), data=data.filtered)
# model 0 = model 1 + predictor
h1.1 <- lmer(vaccine_0neutral ~ vx+gender + education + work_location + age+
SSS_faml+ relationship_status+
(1|residing_country), data=data.filtered)
summary(h1.1)
# model 2 = model 1 + random slopes
h1.2 <- lmer(vaccine_0neutral ~ vx+gender + education + work_location + age+
SSS_faml+ relationship_status+
(1+vx|residing_country), data=data.filtered)
summary(h1.2)
#model 0
b.h1.0 <- brms::brm(vaccine_0neutral ~ gender + education + work_location + age+
SSS_faml+ relationship_status+
(1|residing_country),
data=data.filtered, family = gaussian(),
cores=4,chains=4, save_all_pars = TRUE,
sample_prior ='yes', seed=1660415)
b.h1.0
#model 1
b.h1.1 <- brms::brm(vaccine_0neutral ~ vx+gender + education + work_location + age+
SSS_faml+ relationship_status+
(1|residing_country),
data=data.filtered, family = gaussian(),
cores=4,chains=4, save_pars = save_pars(all = T),
sample_prior ='yes', seed=1660415,prior=prior.coef)
# Bayesian
# prior -> normal distribution
prior.coef <- brms::prior(cauchy(0.,1),class='b')
#model 1
b.h1.1 <- brms::brm(vaccine_0neutral ~ vx+gender + education + work_location + age+
SSS_faml+ relationship_status+
(1|residing_country),
data=data.filtered, family = gaussian(),
cores=4,chains=4, save_pars = save_pars(all = T),
sample_prior ='yes', seed=1660415,prior=prior.coef)
b.h1.1
#model 2
b.h1.2 <- brms::brm(vaccine_0neutral ~ vx+gender + education + work_location + age+
SSS_faml+ relationship_status+
(1+vx|residing_country),
data=data.filtered, family = gaussian(),
cores=4,chains=4, save_pars = save_pars(all = T),
sample_prior ='yes', seed=1660415,prior=prior.coef)
#model 2
b.h1.2 <- brms::brm(vaccine_0neutral ~ vx+gender + education + work_location + age+
SSS_faml+ relationship_status+
(1+vx|residing_country),
data=data.filtered, family = gaussian(),
cores=4,chains=4, save_pars = save_pars(all = T),
sample_prior ='yes', seed=1660415,prior=prior.coef)
b.h1.2
# model bayes factors
bf.h1.1 <- bayes_factor(b.h1.1,b.h1.0)
bf.h1.2 <- bayes_factor(b.h1.2,b.h1.0)
log(as.numeric(bf.h1.1[1]))
log(as.numeric(bf.h1.2[1]))
bf.h1.21 <- bayes_factor(b.h1.2,b.h1.1)
log(as.numeric(bf.h1.21[1]))
# predictor bayes factor check
# one direction -> positive
hypothesis(b.h1.2,'vx>0')
pt
pt(h1.2)
coef(h1.2)
coef(h1.2)[,1]
coef(h1.2)[1]
coef(h1.2)[2]
coef(h1.2)[1,1]
coef(h1.2)[,2]
coef(h1.2)[1,]
coef(h1.2)
coef(h1.2)[2]
coef(h1.2)[1]
coef(h1.2)[1,2]
class(coef(h1.2))
coef(h1.2)[1]
coef(h1.2)[1][2]
as.vector(coef(h1.2)[1])
as.vector(coef(h1.2)[1])[2]
as.vector(coef(h1.2))
as.matrix(coef(h1.2))
fixef(h1.2)
fixef(h1.2)[1]
fixef(h1.2)[2]
df
df(h1.2)
anova(h1.2)
?anova
anova(h1.2,lower=F)
anova(h1.2,lower=T)
summary(h1.2)
summary(h1.2)[1]
summary(h1.2)[2]
summary(h1.2)[3]
summary(h1.2)[4]
summary(h1.2)[5]
summary(h1.2)[6]
summary(h1.2)[7]
test<-summary(h1.2)
test$coefficients
test$coefficients[2]
pt(6.366e-01, df = 3.898e+01)
?pt
pt(26.4674881, df = 3.898e+01)
pt(26.4674881, df = 3.898e+01,lower.tail = T)
pt(26.4674881, df = 3.898e+01,lower.tail = F)
save.image(file='Vaccine_H1.RData')
library(effectsize)
cohen.d(h1.2)
effectsize::cohens_d(h1.2)
install.packages('effsize')
library(effsize)
effsize::cohen.d(h1.2)
t_to_d(h1.2)
install.packages('EMAtools')
library(EMAtools)
EMAtools::lme.dscore(h1.2, type='lme4')
EMAtools::lme.dscore(h1.2, type='lme4', data=data.filtered)
# effect size
EMAtools::lme.dscore(h1.1, type='lme4', data=data.filtered)
