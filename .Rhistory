randu
?random
??random
?sort
??Random
# first names
names<-c(
'Abdullah',
'Andrea',
'Candace',
'Delany',
'Diana',
'Elia',
'Erin',
'James',
'Kim',
'Qi',
'Sherry',
'Virginia'
)
len(names)
length(names)
?seed
??seed
?set.seed
# random seed
set.seed(6508420456)
# random seed
set.seed(6508420456)
# random seed
set.seed(1)
# random seed
set.seed(850110)
# first names
names<-c(
'Abdullah',
'Andrea',
'Candace',
'Delany',
'Diana',
'Elia',
'Erin',
'James',
'Kim',
'Qi',
'Sherry',
'Virginia'
)
# random order
sample(names)
# random seed
set.seed(850110)
# first names
names<-c(
'Abdullah',
'Andrea',
'Candace',
'Delany',
'Diana',
'Elia',
'Erin',
'James',
'Kim',
'Qi',
'Sherry',
'Virginia'
)
# random order
sample(names)
# random seed
set.seed(01101985)
# first names
names<-c(
'Abdullah',
'Andrea',
'Candace',
'Delany',
'Diana',
'Elia',
'Erin',
'James',
'Kim',
'Qi',
'Sherry',
'Virginia'
)
# random order
sample(names)
# random seed
set.seed(01101985)
# first names
names<-c(
'Abdullah',
'Andrea',
'Candace',
'Delany',
'Diana',
'Elia',
'Erin',
'James',
'Kim',
'Qi',
'Sherry',
'Virginia'
)
# random order
sample(names)
# random seed
set.seed(01101985)
# first names
names<-c(
'Abdullah',
'Andrea',
'Candace',
'Delany',
'Diana',
'Elia',
'Erin',
'James',
'Kim',
'Qi',
'Sherry',
'Virginia'
)
# random order
sample(names)
load("~/Documents/Documents_loaner/Research/MEP_HLM/MEP_merged.RData")
library(psych)
library(lmerTest        )
library(lmerTest        )
test.elev.3 <- lmer(Elevation ~ Attainability * Relevance + (1+Attainability+Relevance|study/ID),data=DATA,
control = lmerControl(
optimizer ='optimx', optCtrl=list(method='nlminb')),REML=F)
test.elev.3
summary(test.elev.3)
btest.elev.3  <- brms::brm(Elevation ~ Attainability * Relevance + (1+Attainability+Relevance|study/ID),
data=DATA, family = gaussian(),
cores=4,chains=4, iter=10000, save_all_pars =  TRUE,
sample_prior ='yes',prior=prior.coef,warmup=5000, seed=1660415,control = list(adapt_delta = 0.99),inits='0')
btest.elev.3
hypothesis(btest.elev.3,'Attainability:Relevance=0')
library(brms)
hypothesis(btest.elev.3,'Attainability:Relevance=0')
gc()
load("~/Documents/Documents_loaner/Research/MEP_HLM/MEP_merged.RData")
btest.plea.3
load("~/Documents/Documents_loaner/Research/MEP_HLM/MEP_merged1.RData")
bf.plea.03
btest.plea.3
summary(test.plea.3)
head(DATA)
describe(DATA)
library(psych)
describe(DATA)
class(DATA$ID)
class(DATA$Group)
class(DATA$Attainability)
class(DATA$story)
setwd("~/Documents/GitHub/COVIDiSTRESS2_Vaccine")
library(lavaan)
Demo.twolevel
head(Demo.twolevel)
model <- '
level: 1
fw =~ y1 + y2 + y3
fw ~ x1 + x2 + x3
level: 2
fb =~ y1 + y2 + y3
fb ~ w1 + w2
'
fit <- sem(model = model, data = Demo.twolevel, cluster = "cluster")
summary(fit)
load("~/Documents/GitHub/COVIDiSTRESS2_Vaccine/Vaccine_aligned.RData")
model
# model specification
model.test <-
'
level: 1
trust_6 ~ a1*consp
vx ~ b1*consp + b2*trust_6
level: 2
trust_6 ~ 1
vx ~ 1
'
sem.test <- sem(model=model.test,data=data.filtered,cluster = 'residing_country')
sem.test
summary(sem.test)
# model specification
model.test <-
'
level: 1
trust_6 ~ a1*consp
vx ~ b1*consp + b2*trust_6
level: 2
trust_6 ~ 1
vx ~ 1
ab := a1*b2
total := b2 + (a1*b1)
'
sem.test <- sem(model=model.test,data=data.filtered,cluster = 'residing_country')
summary(sem.test)
# standardization
data.filtered$trust_6 <- scale(data.filtered$trust_6)
data.filtered$vx <- scale(data.filtered$vx)
data.filtered$consp <- scale(data.filtered$consp)
# model specification
model.test <-
'
level: 1
trust_6 ~ a1*consp
vx ~ b1*consp + b2*trust_6
level: 2
trust_6 ~ 1
vx ~ 1
ab := a1*b2
total := b2 + (a1*b1)
'
sem.test <- sem(model=model.test,data=data.filtered,cluster = 'residing_country')
summary(sem.test)
fitMeasures(sem.test)
# model specification
model.test <-
'
level: 1
trust_6 ~ a1*consp
vx ~ b1*consp + b2*trust_6
level: 2
trust_6 ~ consp
vx ~ 1
ab := a1*b2
total := b2 + (a1*b1)
'
sem.test <- sem(model=model.test,data=data.filtered,cluster = 'residing_country')
summary(sem.test)
fitMeasures(sem.test)
# model specification
model.test <-
'
level: 1
trust_6 ~ a1*consp
vx ~ b1*consp + b2*trust_6
level: 2
trust_6 ~ consp
vx ~ consp + trust_6
ab := a1*b2
total := b2 + (a1*b1)
'
sem.test <- sem(model=model.test,data=data.filtered,cluster = 'residing_country')
summary(sem.test)
fitMeasures(sem.test)
# model specification
model.test <-
'
level: 1
trust_6 ~ a1*consp
vx ~ b1*consp + b2*trust_6
level: 2
trust_6 ~ 1
vx ~ 1
ab := a1*b2
total := b2 + (a1*b1)
'
sem.test <- sem(model=model.test,data=data.filtered,cluster = 'residing_country')
summary(sem.test)
lavInspect(sem.test)
lavInspect(sem.test,'h1')
model.test <-
'
trust_6 ~ a1*consp
vx ~ b1*consp + b2*trust_6
ab := a1*b2
total := b2 + (a1*b1)
'
sem.test <- sem(model=model.test,data=data.filtered,cluster = 'residing_country')
summary(sem.test)
fitMeasures(sem.test)
# full
model.test <-
'
level: 1
trust_6 ~ a1*consp
vx ~ b1*consp + b2*trust_6
level: 2
trust_6 ~ consp
vx ~ consp + trust_6
ab := a1*b2
total := b2 + (a1*b1)
'
sem.test <- sem(model=model.test,data=data.filtered,cluster = 'residing_country')
summary(sem.test)
lavInspect(sem.test,'h1')
sem.test
summary(sem.test)
# model specification
model.test <-
'
level: 1
trust_6 ~ a1*consp
vx ~ b1*consp + b2*trust_6
level: 2
trust_6 ~ 1
vx ~ 1
ab := a1*b2
total := b2 + (a1*b1)
'
sem.test <- sem(model=model.test,data=data.filtered,cluster = 'residing_country')
summary(sem.test)
fitMeasures(sem.test)
sem.test <- sem(model=model.test,data=data.filtered,cluster = 'residing_country',
estimator='reML')
sem.test <- sem(model=model.test,data=data.filtered,cluster = 'residing_country',
estimator='REML')
sem.test <- sem(model=model.test,data=data.filtered,cluster = 'residing_country',
estimator='MLM')
sem.test <- sem(model=model.test,data=data.filtered,cluster = 'residing_country',
estimator='MLR')
summary(sem.test)
fitMeasures(sem.test)
